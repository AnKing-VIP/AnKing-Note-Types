<%#

# Components
components/ankingAddEventListener
components/shortcutMatcher
components/hintButton
components/colorfulTags

# Global Variables
- ButtonShortcuts: Object[Shortcut string]
- ToggleAllButtonsShortcut: Shortcut string
- ToggleNextButtonShortcut: Shortcut string
- ButtonAutoReveal: Object[boolean]
- ScrollToButton: boolean

_%>
<!-- HINT BUTTONS SETUP -->
<script>
    (function() {
      window.toggleHintBtn = function(containerId, noScrolling=false) {
        const container = document.getElementById(containerId)
        const link = container.getElementsByTagName("a")[0]
        const button = container.getElementsByTagName("button")[0]
        const hint = container.getElementsByTagName("div")[0]
    
        if (hint.style.display == "none") {
          button.classList.add("expanded-button")
          hint.style.display = "block"
          link.style.display = "none"
          if (ScrollToButton && !noScrolling) {
            hint.scrollIntoView({
              behavior: "smooth", // "auto" for instant scrolling
              block: "start",
              inline: "nearest"
            });
          }
        } else {
          button.classList.remove("expanded-button")
          hint.style.display = "none"
          link.style.display = ""
        }
      }

      window.toggleNextButton = function(){
        // adapted from Hint Hotkey add-on
        var customEvent = document.createEvent('MouseEvents');
        customEvent.initEvent('click', false, true);
        var arr = document.getElementsByTagName('a');
        for (var i=0; i<arr.length; i++) {
          var el = arr[i];
          if (
            window.getComputedStyle(el).display === 'none' ||
            window.getComputedStyle(el.parentElement).display === 'none'
          ) {
            continue;
          }
          if (el.classList.contains("hint")) {
            el.dispatchEvent(customEvent);
            break
          }
        }
      }
        
      const isToggleNextShortcut = shortcutMatcher(ToggleNextButtonShortcut)
      ankingAddEventListener("keydown", (evt) => {
        if (evt.repeat) return
        if (isToggleNextShortcut(evt)) {
          toggleNextButton()
        }
      })
    
      const setupHintBtn = function(elem) {
        const containerId = elem.id
        const fieldName = elem.dataset.name
        const container = document.getElementById(containerId)
        const button = elem.getElementsByClassName("button")[0]
        const tag = `autoopen::${fieldName.toLowerCase().replace(' ', '_')}`
        if (ButtonAutoReveal[fieldName] || (globalThis.tagList && globalThis.tagList.includes(tag))) {
          toggleHintBtn(containerId, noScrolling=true)
        }
        const shortcut = ButtonShortcuts[fieldName]
        container.title = shortcut ? `Shortcut: ${shortcut}` : ""
        const isShortcut = shortcutMatcher(shortcut)
        const isToggleAllShortcut = shortcutMatcher(ToggleAllButtonsShortcut)
        ankingAddEventListener("keydown", (evt) => {
          if (evt.repeat) return
          if (isShortcut(evt) || isToggleAllShortcut(evt)) {
            toggleHintBtn(containerId)
          }
        })
      }
    
      const hints = document.getElementsByClassName("hintBtn")
      for (let i = 0; i < hints.length; i++) {
        setupHintBtn(hints[i])
      }
    })()
    </script>